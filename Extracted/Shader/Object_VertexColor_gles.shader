//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Object/VertexColor" {
Properties {
_MainTex ("Albedo (RGB)", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "COLORMASK"
  LOD 200
  Tags { "RenderType" = "Opaque" }
  GpuProgramID 405055
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  xlv_COLOR0 = tmpvar_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
}


#endif
#ifdef FRAGMENT
varying lowp vec4 xlv_COLOR0;
void main ()
{
  gl_FragData[0] = xlv_COLOR0;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  xlv_COLOR0 = tmpvar_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
}


#endif
#ifdef FRAGMENT
varying lowp vec4 xlv_COLOR0;
void main ()
{
  gl_FragData[0] = xlv_COLOR0;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  xlv_COLOR0 = tmpvar_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
}


#endif
#ifdef FRAGMENT
varying lowp vec4 xlv_COLOR0;
void main ()
{
  gl_FragData[0] = xlv_COLOR0;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = tmpvar_1;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((unity_MatrixV * unity_ObjectToWorld) * tmpvar_2).xyz;
  lowp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_4 = tmpvar_5;
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = clamp (((
    sqrt(dot (tmpvar_3, tmpvar_3))
   * unity_FogParams.z) + unity_FogParams.w), 0.0, 1.0);
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_6;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  col_1.w = xlv_COLOR0.w;
  col_1.xyz = mix (unity_FogColor.xyz, xlv_COLOR0.xyz, vec3(xlv_TEXCOORD0));
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = tmpvar_1;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((unity_MatrixV * unity_ObjectToWorld) * tmpvar_2).xyz;
  lowp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_4 = tmpvar_5;
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = clamp (((
    sqrt(dot (tmpvar_3, tmpvar_3))
   * unity_FogParams.z) + unity_FogParams.w), 0.0, 1.0);
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_6;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  col_1.w = xlv_COLOR0.w;
  col_1.xyz = mix (unity_FogColor.xyz, xlv_COLOR0.xyz, vec3(xlv_TEXCOORD0));
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = tmpvar_1;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((unity_MatrixV * unity_ObjectToWorld) * tmpvar_2).xyz;
  lowp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = clamp (_glesColor, 0.0, 1.0);
  tmpvar_4 = tmpvar_5;
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = clamp (((
    sqrt(dot (tmpvar_3, tmpvar_3))
   * unity_FogParams.z) + unity_FogParams.w), 0.0, 1.0);
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_6;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
varying lowp vec4 xlv_COLOR0;
varying lowp float xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  col_1.w = xlv_COLOR0.w;
  col_1.xyz = mix (unity_FogColor.xyz, xlv_COLOR0.xyz, vec3(xlv_TEXCOORD0));
  gl_FragData[0] = col_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 4916
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  c_1.xyz = c_13.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  c_1.xyz = c_13.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  c_1.xyz = c_13.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_6;
  tmpvar_6 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_6 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_6 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_35.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_35.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_35.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_32.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_32.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  c_2.xyz = c_32.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_6);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  c_4.xyz = c_37.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normal_22;
  mediump vec3 res_25;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_24);
  x_26.y = dot (unity_SHAg, tmpvar_24);
  x_26.z = dot (unity_SHAb, tmpvar_24);
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  mediump vec3 tmpvar_29;
  tmpvar_29 = max (((1.055 * 
    pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_25 = tmpvar_29;
  ambient_23 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_23;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normal_22;
  mediump vec3 res_25;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_24);
  x_26.y = dot (unity_SHAg, tmpvar_24);
  x_26.z = dot (unity_SHAb, tmpvar_24);
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  mediump vec3 tmpvar_29;
  tmpvar_29 = max (((1.055 * 
    pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_25 = tmpvar_29;
  ambient_23 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_23;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normal_22;
  mediump vec3 res_25;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_24);
  x_26.y = dot (unity_SHAg, tmpvar_24);
  x_26.z = dot (unity_SHAb, tmpvar_24);
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  mediump vec3 tmpvar_29;
  tmpvar_29 = max (((1.055 * 
    pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_25 = tmpvar_29;
  ambient_23 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_23;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_29) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  c_4.xyz = c_34.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_31) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_20.xyz, vec3(tmpvar_24));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_20.xyz, vec3(tmpvar_24));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_12;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_11 * xlv_TEXCOORD3));
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_20.xyz, vec3(tmpvar_24));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_18.xyz, vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_18.xyz, vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_17;
  color_17 = tmpvar_16;
  tmpvar_15 = (unity_Lightmap_HDR.x * color_17.xyz);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * tmpvar_15));
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_18.xyz, vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_25.xyz, vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_25.xyz, vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 ambient_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x_19;
  x_19.x = dot (unity_SHAr, tmpvar_18);
  x_19.y = dot (unity_SHAg, tmpvar_18);
  x_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec3 x1_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normalWorld_15.xyzz * normalWorld_15.yzzx);
  x1_20.x = dot (unity_SHBr, tmpvar_21);
  x1_20.y = dot (unity_SHBg, tmpvar_21);
  x1_20.z = dot (unity_SHBb, tmpvar_21);
  ambient_17 = max (vec3(0.0, 0.0, 0.0), (x_19 + (x1_20 + 
    (unity_SHC.xyz * ((normalWorld_15.x * normalWorld_15.x) - (normalWorld_15.y * normalWorld_15.y)))
  )));
  mediump vec3 tmpvar_22;
  tmpvar_22 = max (((1.055 * 
    pow (max (ambient_17, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_17 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  tmpvar_16 = (tmpvar_22 + (unity_Lightmap_HDR.x * color_24.xyz));
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_16));
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_25.xyz, vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_15));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_15));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_2;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_2 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  tmpvar_10 = (unity_Lightmap_HDR.x * color_12.xyz);
  lowp vec4 c_13;
  lowp vec4 c_14;
  c_14.xyz = vec3(0.0, 0.0, 0.0);
  c_14.w = tmpvar_5;
  c_13.w = c_14.w;
  c_13.xyz = (tmpvar_4 * tmpvar_10);
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_15));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_23));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_23));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 tmpvar_12;
  mediump vec3 ambient_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_11;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, tmpvar_14);
  x_15.y = dot (unity_SHAg, tmpvar_14);
  x_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  ambient_13 = max (vec3(0.0, 0.0, 0.0), (x_15 + (x1_16 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (ambient_13, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_13 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_12 = (tmpvar_18 + (unity_Lightmap_HDR.x * color_20.xyz));
  lowp vec4 c_21;
  lowp vec4 c_22;
  c_22.xyz = vec3(0.0, 0.0, 0.0);
  c_22.w = tmpvar_6;
  c_21.w = c_22.w;
  c_21.xyz = (tmpvar_5 * tmpvar_12);
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_23));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  tmpvar_20 = (unity_Lightmap_HDR.x * color_22.xyz);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_11 * tmpvar_20));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_7;
  tmpvar_7 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_7 + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (tmpvar_7 + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float shadowMaskAttenuation_17;
  lowp float tmpvar_18;
  tmpvar_18 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_18;
  atten_5 = shadowMaskAttenuation_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_7;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_19;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_21 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_20) * diff_32);
  c_31.w = tmpvar_12;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_11 * tmpvar_21));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  mediump vec3 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_10 + (unity_SHC.xyz * (
    (normal_9.x * normal_9.x)
   - 
    (normal_9.y * normal_9.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  mediump vec3 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_10 + (unity_SHC.xyz * (
    (normal_9.x * normal_9.x)
   - 
    (normal_9.y * normal_9.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  mediump vec3 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (x1_10 + (unity_SHC.xyz * (
    (normal_9.x * normal_9.x)
   - 
    (normal_9.y * normal_9.y)
  )));
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  mediump vec3 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  highp vec4 v_22;
  v_22.x = unity_MatrixV[0].z;
  v_22.y = unity_MatrixV[1].z;
  v_22.z = unity_MatrixV[2].z;
  v_22.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_22.xyz), sqrt(dot (tmpvar_23, tmpvar_23)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  tmpvar_20 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_24), 0.0, 1.0));
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  tmpvar_21 = (unity_Lightmap_HDR.x * color_27.xyz);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_20) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * tmpvar_21));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_35.xyz, vec3(tmpvar_39));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_35.xyz, vec3(tmpvar_39));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec4 v_23;
  v_23.x = unity_MatrixV[0].z;
  v_23.y = unity_MatrixV[1].z;
  v_23.z = unity_MatrixV[2].z;
  v_23.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_23.xyz), sqrt(dot (tmpvar_24, tmpvar_24)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  tmpvar_21 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_25), 0.0, 1.0));
  mediump vec3 ambient_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_20;
  mediump vec3 x_29;
  x_29.x = dot (unity_SHAr, tmpvar_28);
  x_29.y = dot (unity_SHAg, tmpvar_28);
  x_29.z = dot (unity_SHAb, tmpvar_28);
  mediump vec3 x1_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_27 = max (vec3(0.0, 0.0, 0.0), (x_29 + (x1_30 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_32;
  tmpvar_32 = max (((1.055 * 
    pow (max (ambient_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_27 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_34;
  color_34 = tmpvar_33;
  tmpvar_22 = (tmpvar_32 + (unity_Lightmap_HDR.x * color_34.xyz));
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_10 * tmpvar_21) * diff_37);
  c_36.w = tmpvar_11;
  c_35.w = c_36.w;
  c_35.xyz = (c_36.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_35.xyz, vec3(tmpvar_39));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_28;
  tmpvar_28 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_28));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_28;
  tmpvar_28 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_28));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_23;
  color_23 = tmpvar_22;
  tmpvar_17 = (unity_Lightmap_HDR.x * color_23.xyz);
  mediump vec3 shadowColor_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = unity_ShadowColor.xyz;
  shadowColor_24 = tmpvar_25;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_24), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_26;
  lowp vec4 c_27;
  c_27.xyz = vec3(0.0, 0.0, 0.0);
  c_27.w = tmpvar_7;
  c_26.w = c_27.w;
  c_26.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_28;
  tmpvar_28 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_28));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_34));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_34));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_3 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  tmpvar_1 = tmpvar_12;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_16;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normalWorld_16.xyzz * normalWorld_16.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_22 = max (vec3(0.0, 0.0, 0.0), (x_24 + (x1_25 + 
    (unity_SHC.xyz * ((normalWorld_16.x * normalWorld_16.x) - (normalWorld_16.y * normalWorld_16.y)))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (ambient_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_22 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_17 = (tmpvar_27 + (unity_Lightmap_HDR.x * color_29.xyz));
  mediump vec3 shadowColor_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = unity_ShadowColor.xyz;
  shadowColor_30 = tmpvar_31;
  tmpvar_17 = min (tmpvar_17, mix (max (
    (tmpvar_17 - ((max (0.0, 
      dot (normalWorld_16, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_20), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_30), tmpvar_17, _LightShadowData.xxx));
  lowp vec4 c_32;
  lowp vec4 c_33;
  c_33.xyz = vec3(0.0, 0.0, 0.0);
  c_33.w = tmpvar_7;
  c_32.w = c_33.w;
  c_32.xyz = (tmpvar_6 * tmpvar_17);
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_34));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_20, tmpvar_26));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_21, tmpvar_27));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump float bakedAtten_20;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_20 = tmpvar_23;
  highp vec4 v_24;
  v_24.x = unity_MatrixV[0].z;
  v_24.y = unity_MatrixV[1].z;
  v_24.z = unity_MatrixV[2].z;
  v_24.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_24.xyz), sqrt(dot (tmpvar_25, tmpvar_25)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  tmpvar_21 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_26)
  , 0.0, 1.0), bakedAtten_20));
  mediump vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_29;
  color_29 = tmpvar_28;
  tmpvar_22 = (unity_Lightmap_HDR.x * color_29.xyz);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_21) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_10 * tmpvar_22));
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_34));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_7.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = (unity_WorldToShadow[0] * tmpvar_7);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  lowp float tmpvar_16;
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD4.xy).x > xlv_TEXCOORD4.z)), lightShadowDataX_17);
  tmpvar_16 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_6;
  mediump float bakedAtten_21;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_21 = tmpvar_24;
  highp vec4 v_25;
  v_25.x = unity_MatrixV[0].z;
  v_25.y = unity_MatrixV[1].z;
  v_25.z = unity_MatrixV[2].z;
  v_25.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_25.xyz), sqrt(dot (tmpvar_26, tmpvar_26)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  tmpvar_22 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_27)
  , 0.0, 1.0), bakedAtten_21));
  mediump vec3 ambient_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_20;
  mediump vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_30);
  x_31.y = dot (unity_SHAg, tmpvar_30);
  x_31.z = dot (unity_SHAb, tmpvar_30);
  mediump vec3 x1_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  ambient_29 = max (vec3(0.0, 0.0, 0.0), (x_31 + (x1_32 + 
    (unity_SHC.xyz * ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y)))
  )));
  mediump vec3 tmpvar_34;
  tmpvar_34 = max (((1.055 * 
    pow (max (ambient_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_29 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_36;
  color_36 = tmpvar_35;
  tmpvar_23 = (tmpvar_34 + (unity_Lightmap_HDR.x * color_36.xyz));
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_22) * diff_39);
  c_38.w = tmpvar_11;
  c_37.w = c_38.w;
  c_37.xyz = (c_38.xyz + (tmpvar_10 * tmpvar_23));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_37.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normal_23;
  mediump vec3 res_26;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_25);
  x_27.y = dot (unity_SHAg, tmpvar_25);
  x_27.z = dot (unity_SHAb, tmpvar_25);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_26 = tmpvar_30;
  ambient_24 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normal_23;
  mediump vec3 res_26;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_25);
  x_27.y = dot (unity_SHAg, tmpvar_25);
  x_27.z = dot (unity_SHAb, tmpvar_25);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_26 = tmpvar_30;
  ambient_24 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normal_23;
  mediump vec3 res_26;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_25);
  x_27.y = dot (unity_SHAg, tmpvar_25);
  x_27.z = dot (unity_SHAb, tmpvar_25);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_26 = tmpvar_30;
  ambient_24 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = ambient_24;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_15.xyz, vec3(tmpvar_19));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_11 * tmpvar_29) * diff_31);
  c_30.w = tmpvar_12;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_30.xyz, vec3(tmpvar_33));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec3 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_glesNormal * tmpvar_9));
  highp vec3 lightColor0_11;
  lightColor0_11 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_12;
  lightColor1_12 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_13;
  lightColor2_13 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_14;
  lightColor3_14 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_15;
  lightAttenSq_15 = unity_4LightAtten0;
  highp vec3 col_16;
  highp vec4 ndotl_17;
  highp vec4 lengthSq_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_18 = (tmpvar_19 * tmpvar_19);
  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_18 = tmpvar_22;
  ndotl_17 = (tmpvar_19 * tmpvar_10.x);
  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
  highp vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
  ndotl_17 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (tmpvar_22 * lightAttenSq_15)
  ))));
  col_16 = (lightColor0_11 * tmpvar_24.x);
  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
  tmpvar_1 = col_16;
  mediump vec3 normal_25;
  normal_25 = tmpvar_10;
  mediump vec3 ambient_26;
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
  )));
  tmpvar_1 = ambient_26;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_8;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_26;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec3 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_glesNormal * tmpvar_9));
  highp vec3 lightColor0_11;
  lightColor0_11 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_12;
  lightColor1_12 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_13;
  lightColor2_13 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_14;
  lightColor3_14 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_15;
  lightAttenSq_15 = unity_4LightAtten0;
  highp vec3 col_16;
  highp vec4 ndotl_17;
  highp vec4 lengthSq_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_18 = (tmpvar_19 * tmpvar_19);
  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_18 = tmpvar_22;
  ndotl_17 = (tmpvar_19 * tmpvar_10.x);
  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
  highp vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
  ndotl_17 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (tmpvar_22 * lightAttenSq_15)
  ))));
  col_16 = (lightColor0_11 * tmpvar_24.x);
  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
  tmpvar_1 = col_16;
  mediump vec3 normal_25;
  normal_25 = tmpvar_10;
  mediump vec3 ambient_26;
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
  )));
  tmpvar_1 = ambient_26;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_8;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_26;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec3 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_glesNormal * tmpvar_9));
  highp vec3 lightColor0_11;
  lightColor0_11 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_12;
  lightColor1_12 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_13;
  lightColor2_13 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_14;
  lightColor3_14 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_15;
  lightAttenSq_15 = unity_4LightAtten0;
  highp vec3 col_16;
  highp vec4 ndotl_17;
  highp vec4 lengthSq_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_18 = (tmpvar_19 * tmpvar_19);
  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_18 = tmpvar_22;
  ndotl_17 = (tmpvar_19 * tmpvar_10.x);
  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
  highp vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
  ndotl_17 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (tmpvar_22 * lightAttenSq_15)
  ))));
  col_16 = (lightColor0_11 * tmpvar_24.x);
  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
  tmpvar_1 = col_16;
  mediump vec3 normal_25;
  normal_25 = tmpvar_10;
  mediump vec3 ambient_26;
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
  )));
  tmpvar_1 = ambient_26;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_8;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = ambient_26;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_23;
  highp vec4 shadowCoord_24;
  shadowCoord_24 = (unity_WorldToShadow[0] * tmpvar_22);
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, shadowCoord_24.xy).x > shadowCoord_24.z)), lightShadowDataX_25);
  tmpvar_23 = tmpvar_27;
  realtimeShadowAttenuation_17 = tmpvar_23;
  mediump float tmpvar_28;
  tmpvar_28 = clamp ((realtimeShadowAttenuation_17 + tmpvar_20), 0.0, 1.0);
  atten_5 = tmpvar_28;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_29;
  normalWorld_29 = tmpvar_7;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 tmpvar_33;
  tmpvar_33 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_32)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_30) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = (c_35.xyz + (tmpvar_11 * tmpvar_33));
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_38));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = mix (realtimeShadowAttenuation_17, shadowMaskAttenuation_18, tmpvar_21);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_31) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_32.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * tmpvar_9.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_14)
  ))));
  col_15 = (lightColor0_10 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
  tmpvar_1 = col_15;
  mediump vec3 normal_24;
  normal_24 = tmpvar_9;
  mediump vec3 ambient_25;
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  ambient_25 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_26 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  tmpvar_1 = ambient_25;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD6 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  mediump float realtimeShadowAttenuation_17;
  mediump float shadowMaskAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD4), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_25;
  highp vec4 shadowCoord_26;
  shadowCoord_26 = (unity_WorldToShadow[0] * tmpvar_24);
  highp float lightShadowDataX_27;
  mediump float tmpvar_28;
  tmpvar_28 = _LightShadowData.x;
  lightShadowDataX_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = max (float((texture2D (_ShadowMapTexture, shadowCoord_26.xy).x > shadowCoord_26.z)), lightShadowDataX_27);
  tmpvar_25 = tmpvar_29;
  realtimeShadowAttenuation_17 = tmpvar_25;
  mediump float tmpvar_30;
  tmpvar_30 = min (clamp ((realtimeShadowAttenuation_17 + tmpvar_21), 0.0, 1.0), shadowMaskAttenuation_18);
  atten_5 = tmpvar_30;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_9;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_31;
  normalWorld_31 = tmpvar_7;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x_34;
  x_34.x = dot (unity_SHAr, tmpvar_33);
  x_34.y = dot (unity_SHAg, tmpvar_33);
  x_34.z = dot (unity_SHAb, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_34)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_32) * diff_38);
  c_37.w = tmpvar_12;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_11 * tmpvar_35));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 86245
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_11 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_12;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_11 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_12;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_10 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_11;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_12 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_13;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_12 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_13;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_11 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_12;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_11 * tmpvar_1) * diff_37);
  c_36.w = tmpvar_12;
  c_35.w = c_36.w;
  c_35.xyz = c_36.xyz;
  c_3.xyz = c_35.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_11 * tmpvar_1) * diff_37);
  c_36.w = tmpvar_12;
  c_35.w = c_36.w;
  c_35.xyz = c_36.xyz;
  c_3.xyz = c_35.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_37 = tmpvar_38;
  c_36.xyz = ((tmpvar_11 * tmpvar_1) * diff_37);
  c_36.w = tmpvar_12;
  c_35.w = c_36.w;
  c_35.xyz = c_36.xyz;
  c_3.xyz = c_35.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_11 * tmpvar_1) * diff_45);
  c_44.w = tmpvar_12;
  c_43.w = c_44.w;
  c_43.xyz = c_44.xyz;
  c_3.xyz = c_43.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_11 * tmpvar_1) * diff_45);
  c_44.w = tmpvar_12;
  c_43.w = c_44.w;
  c_43.xyz = c_44.xyz;
  c_3.xyz = c_43.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_11 * tmpvar_1) * diff_45);
  c_44.w = tmpvar_12;
  c_43.w = c_44.w;
  c_43.xyz = c_44.xyz;
  c_3.xyz = c_43.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_11 * tmpvar_1) * diff_39);
  c_38.w = tmpvar_12;
  c_37.w = c_38.w;
  c_37.xyz = c_38.xyz;
  c_3.xyz = c_37.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_11 * tmpvar_1) * diff_47);
  c_46.w = tmpvar_12;
  c_45.w = c_46.w;
  c_45.xyz = c_46.xyz;
  c_3.xyz = c_45.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  c_33.w = c_34.w;
  c_33.xyz = c_34.xyz;
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  c_32.w = c_33.w;
  c_32.xyz = c_33.xyz;
  c_3.xyz = c_32.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp vec4 c_48;
  lowp float diff_49;
  mediump float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_49 = tmpvar_50;
  c_48.xyz = ((tmpvar_11 * tmpvar_1) * diff_49);
  c_48.w = tmpvar_12;
  c_47.w = c_48.w;
  c_47.xyz = c_48.xyz;
  c_3.xyz = c_47.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  c_34.w = c_35.w;
  c_34.xyz = c_35.xyz;
  c_3.xyz = c_34.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp vec4 c_50;
  lowp float diff_51;
  mediump float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_51 = tmpvar_52;
  c_50.xyz = ((tmpvar_11 * tmpvar_1) * diff_51);
  c_50.w = tmpvar_12;
  c_49.w = c_50.w;
  c_49.xyz = c_50.xyz;
  c_3.xyz = c_49.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_15.xyz * vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_15.xyz * vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_9 = tmpvar_4;
  tmpvar_10 = tmpvar_6;
  highp vec2 uv_11;
  uv_11 = xlv_TEXCOORD1.zx;
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_12 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_13 > 0.5)) {
    uv_11 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, uv_11);
  tmpvar_9 = (tmpvar_14.xyz * xlv_TEXCOORD2);
  tmpvar_10 = tmpvar_14.w;
  tmpvar_4 = tmpvar_9;
  tmpvar_6 = tmpvar_10;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_9 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_10;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_15.xyz * vec3(tmpvar_18));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_11 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_12;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_11 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_12;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17);
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18) * tmpvar_20);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_11 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_12;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_17).xyz;
  highp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_11 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_12;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_19.xyz * vec3(tmpvar_22));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_16).xy).w;
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTexture0, vec2(dot (lightCoord_6, lightCoord_6))).w * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float shadowMaskAttenuation_16;
  lowp float tmpvar_17;
  tmpvar_17 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_16 = tmpvar_17;
  atten_4 = shadowMaskAttenuation_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_10 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_11;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_18.xyz * vec3(tmpvar_21));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec4 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18);
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((lightCoord_6.xy / lightCoord_6.w) + 0.5));
  tmpvar_21 = tmpvar_22.w;
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (lightCoord_6.xyz, lightCoord_6.xyz)));
  tmpvar_23 = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = (((
    float((lightCoord_6.z > 0.0))
   * tmpvar_21) * tmpvar_23) * shadow_5);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_12 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_13;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  highp vec3 lightCoord_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  lowp vec3 lightDir_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_10 = tmpvar_11;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = 0.0;
  tmpvar_8 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_12 = tmpvar_7;
  tmpvar_13 = tmpvar_9;
  highp vec2 uv_14;
  uv_14 = xlv_TEXCOORD1.zx;
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_15 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_16 > 0.5)) {
    uv_14 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, uv_14);
  tmpvar_12 = (tmpvar_17.xyz * xlv_TEXCOORD2);
  tmpvar_13 = tmpvar_17.w;
  tmpvar_7 = tmpvar_12;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  lightCoord_6 = (unity_WorldToLight * tmpvar_18).xyz;
  mediump float shadowMaskAttenuation_19;
  lowp float tmpvar_20;
  tmpvar_20 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_20;
  shadow_5 = shadowMaskAttenuation_19;
  highp float tmpvar_21;
  tmpvar_21 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_6, lightCoord_6))).w * textureCube (_LightTexture0, lightCoord_6).w) * shadow_5);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_10;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_8, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_12 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_13;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_22.xyz * vec3(tmpvar_25));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float shadowMaskAttenuation_18;
  lowp float tmpvar_19;
  tmpvar_19 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_18 = tmpvar_19;
  shadow_5 = shadowMaskAttenuation_18;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_11 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_12;
  highp float tmpvar_24;
  tmpvar_24 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_21.xyz * vec3(tmpvar_24));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_35.xyz * vec3(tmpvar_38));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_35.xyz * vec3(tmpvar_38));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, tmpvar_25);
  mediump float tmpvar_28;
  if ((tmpvar_27.x < (tmpvar_25.z / tmpvar_25.w))) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  tmpvar_26 = tmpvar_28;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_5);
  atten_4 = tmpvar_34;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_36 = tmpvar_37;
  c_35.xyz = ((tmpvar_11 * tmpvar_1) * diff_36);
  c_35.w = tmpvar_12;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_35.xyz * vec3(tmpvar_38));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_11 * tmpvar_1) * diff_44);
  c_43.w = tmpvar_12;
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_43.xyz * vec3(tmpvar_46));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_11 * tmpvar_1) * diff_44);
  c_43.w = tmpvar_12;
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_43.xyz * vec3(tmpvar_46));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_WorldToShadow[0] * tmpvar_24);
  lowp float tmpvar_26;
  highp vec4 shadowVals_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_25.xyz / tmpvar_25.w);
  shadowVals_27.x = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_27.y = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_27.z = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_27.w = texture2D (_ShadowMapTexture, (tmpvar_28.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_27, tmpvar_28.zzzz);
  mediump vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  mediump float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  mediump float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_26 = tmpvar_36;
  realtimeShadowAttenuation_19 = tmpvar_26;
  mediump float tmpvar_37;
  tmpvar_37 = clamp ((realtimeShadowAttenuation_19 + tmpvar_22), 0.0, 1.0);
  shadow_5 = tmpvar_37;
  lowp float tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_38 = tmpvar_39.w;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_40 = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_38) * tmpvar_40) * shadow_5);
  atten_4 = tmpvar_42;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_11 * tmpvar_1) * diff_44);
  c_43.w = tmpvar_12;
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_43.xyz * vec3(tmpvar_46));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = mix (realtimeShadowAttenuation_19, shadowMaskAttenuation_20, tmpvar_23);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, tmpvar_27);
  mediump float tmpvar_30;
  if ((tmpvar_29.x < (tmpvar_27.z / tmpvar_27.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  tmpvar_28 = tmpvar_30;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_5);
  atten_4 = tmpvar_36;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_11 * tmpvar_1) * diff_38);
  c_37.w = tmpvar_12;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_37.xyz * vec3(tmpvar_40));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17);
  mediump float realtimeShadowAttenuation_19;
  mediump float shadowMaskAttenuation_20;
  highp vec4 v_21;
  v_21.x = unity_MatrixV[0].z;
  v_21.y = unity_MatrixV[1].z;
  v_21.z = unity_MatrixV[2].z;
  v_21.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_21.xyz), sqrt(dot (tmpvar_22, tmpvar_22)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_20 = tmpvar_25;
  realtimeShadowAttenuation_19 = 1.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_WorldToShadow[0] * tmpvar_26);
  lowp float tmpvar_28;
  highp vec4 shadowVals_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_27.xyz / tmpvar_27.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_28 = tmpvar_38;
  realtimeShadowAttenuation_19 = tmpvar_28;
  mediump float tmpvar_39;
  tmpvar_39 = min (clamp ((realtimeShadowAttenuation_19 + tmpvar_23), 0.0, 1.0), shadowMaskAttenuation_20);
  shadow_5 = tmpvar_39;
  lowp float tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, ((tmpvar_18.xy / tmpvar_18.w) + 0.5));
  tmpvar_40 = tmpvar_41.w;
  lowp float tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(dot (tmpvar_18.xyz, tmpvar_18.xyz)));
  tmpvar_42 = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = (((
    float((tmpvar_18.z > 0.0))
   * tmpvar_40) * tmpvar_42) * shadow_5);
  atten_4 = tmpvar_44;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_11 * tmpvar_1) * diff_46);
  c_45.w = tmpvar_12;
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_45.xyz * vec3(tmpvar_48));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_28.xyz * vec3(tmpvar_31));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_28.xyz * vec3(tmpvar_31));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  highp vec4 v_17;
  v_17.x = unity_MatrixV[0].z;
  v_17.y = unity_MatrixV[1].z;
  v_17.z = unity_MatrixV[2].z;
  v_17.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_17.xyz), sqrt(dot (tmpvar_18, tmpvar_18)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_22;
  highp vec4 shadowCoord_23;
  shadowCoord_23 = (unity_WorldToShadow[0] * tmpvar_21);
  highp float lightShadowDataX_24;
  mediump float tmpvar_25;
  tmpvar_25 = _LightShadowData.x;
  lightShadowDataX_24 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = max (float((texture2D (_ShadowMapTexture, shadowCoord_23.xy).x > shadowCoord_23.z)), lightShadowDataX_24);
  tmpvar_22 = tmpvar_26;
  realtimeShadowAttenuation_16 = tmpvar_22;
  mediump float tmpvar_27;
  tmpvar_27 = clamp ((realtimeShadowAttenuation_16 + tmpvar_19), 0.0, 1.0);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_28.xyz * vec3(tmpvar_31));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_12;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_12;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_18 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = clamp ((realtimeShadowAttenuation_18 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_11 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_12;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = mix (realtimeShadowAttenuation_16, shadowMaskAttenuation_17, tmpvar_20);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = mix (realtimeShadowAttenuation_18, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  tmpvar_10 = tmpvar_5;
  tmpvar_11 = tmpvar_7;
  highp vec2 uv_12;
  uv_12 = xlv_TEXCOORD1.zx;
  highp float tmpvar_13;
  tmpvar_13 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_13 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_14 > 0.5)) {
    uv_12 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, uv_12);
  tmpvar_10 = (tmpvar_15.xyz * xlv_TEXCOORD2);
  tmpvar_11 = tmpvar_15.w;
  tmpvar_5 = tmpvar_10;
  tmpvar_7 = tmpvar_11;
  mediump float realtimeShadowAttenuation_16;
  mediump float shadowMaskAttenuation_17;
  highp vec4 v_18;
  v_18.x = unity_MatrixV[0].z;
  v_18.y = unity_MatrixV[1].z;
  v_18.z = unity_MatrixV[2].z;
  v_18.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_18.xyz), sqrt(dot (tmpvar_19, tmpvar_19)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_17 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_24;
  highp vec4 shadowCoord_25;
  shadowCoord_25 = (unity_WorldToShadow[0] * tmpvar_23);
  highp float lightShadowDataX_26;
  mediump float tmpvar_27;
  tmpvar_27 = _LightShadowData.x;
  lightShadowDataX_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = max (float((texture2D (_ShadowMapTexture, shadowCoord_25.xy).x > shadowCoord_25.z)), lightShadowDataX_26);
  tmpvar_24 = tmpvar_28;
  realtimeShadowAttenuation_16 = tmpvar_24;
  mediump float tmpvar_29;
  tmpvar_29 = min (clamp ((realtimeShadowAttenuation_16 + tmpvar_20), 0.0, 1.0), shadowMaskAttenuation_17);
  atten_4 = tmpvar_29;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_30.xyz * vec3(tmpvar_33));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _WorldSpaceLightPos0.xyz;
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_18;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_26;
  highp vec4 shadowCoord_27;
  shadowCoord_27 = (unity_WorldToShadow[0] * tmpvar_25);
  highp float lightShadowDataX_28;
  mediump float tmpvar_29;
  tmpvar_29 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = max (float((texture2D (_ShadowMapTexture, shadowCoord_27.xy).x > shadowCoord_27.z)), lightShadowDataX_28);
  tmpvar_26 = tmpvar_30;
  realtimeShadowAttenuation_18 = tmpvar_26;
  mediump float tmpvar_31;
  tmpvar_31 = min (clamp ((realtimeShadowAttenuation_18 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_17).xy).w * shadow_5);
  atten_4 = tmpvar_32;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_34 = tmpvar_35;
  c_33.xyz = ((tmpvar_11 * tmpvar_1) * diff_34);
  c_33.w = tmpvar_12;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_33.xyz * vec3(tmpvar_36));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (texture2D (_LightTexture0, vec2(dot (tmpvar_18, tmpvar_18))).w * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (_ShadowMapTexture, vec_23);
  highp vec4 vals_27;
  vals_27 = tmpvar_26;
  highp float tmpvar_28;
  tmpvar_28 = dot (vals_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_24 = tmpvar_28;
  mediump float tmpvar_29;
  if ((shadowVal_24 < mydist_25)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  tmpvar_30 = clamp ((tmpvar_29 + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_31;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_11 * tmpvar_1) * diff_33);
  c_32.w = tmpvar_12;
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_32.xyz * vec3(tmpvar_35));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  highp vec4 v_19;
  v_19.x = unity_MatrixV[0].z;
  v_19.y = unity_MatrixV[1].z;
  v_19.z = unity_MatrixV[2].z;
  v_19.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_19.xyz), sqrt(dot (tmpvar_20, tmpvar_20)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_21 = tmpvar_22;
  highp vec3 vec_23;
  vec_23 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_24;
  highp float mydist_25;
  mydist_25 = ((sqrt(
    dot (vec_23, vec_23)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_23 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_24.x = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_23 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_24.y = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xyz = (vec_23 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_32.xyz, 0.0);
  tmpvar_33 = tmpvar_34;
  shadowVals_24.z = dot (tmpvar_33, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = (vec_23 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_35.xyz, 0.0);
  tmpvar_36 = tmpvar_37;
  shadowVals_24.w = dot (tmpvar_36, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_38;
  tmpvar_38 = lessThan (shadowVals_24, vec4(mydist_25));
  mediump vec4 tmpvar_39;
  tmpvar_39 = _LightShadowData.xxxx;
  mediump float tmpvar_40;
  if (tmpvar_38.x) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = 1.0;
  };
  mediump float tmpvar_41;
  if (tmpvar_38.y) {
    tmpvar_41 = tmpvar_39.y;
  } else {
    tmpvar_41 = 1.0;
  };
  mediump float tmpvar_42;
  if (tmpvar_38.z) {
    tmpvar_42 = tmpvar_39.z;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_38.w) {
    tmpvar_43 = tmpvar_39.w;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_40;
  tmpvar_44.y = tmpvar_41;
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = clamp ((dot (tmpvar_44, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_21), 0.0, 1.0);
  shadow_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_46;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_47;
  lowp float diff_48;
  mediump float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_48 = tmpvar_49;
  c_47.xyz = ((tmpvar_11 * tmpvar_1) * diff_48);
  c_47.w = tmpvar_12;
  highp float tmpvar_50;
  tmpvar_50 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_47.xyz * vec3(tmpvar_50));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = mix (tmpvar_31, shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = mix (dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)), shadowMaskAttenuation_19, tmpvar_22);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = textureCube (_ShadowMapTexture, vec_25);
  highp vec4 vals_29;
  vals_29 = tmpvar_28;
  highp float tmpvar_30;
  tmpvar_30 = dot (vals_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_26 = tmpvar_30;
  mediump float tmpvar_31;
  if ((shadowVal_26 < mydist_27)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  tmpvar_32 = min (clamp ((tmpvar_31 + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_33;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_11 * tmpvar_1) * diff_35);
  c_34.w = tmpvar_12;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_34.xyz * vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp float shadow_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  lowp vec3 lightDir_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_9 = tmpvar_10;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = 0.0;
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_11 = tmpvar_6;
  tmpvar_12 = tmpvar_8;
  highp vec2 uv_13;
  uv_13 = xlv_TEXCOORD1.zx;
  highp float tmpvar_14;
  tmpvar_14 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_14 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_15;
  tmpvar_15 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_15 > 0.5)) {
    uv_13 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, uv_13);
  tmpvar_11 = (tmpvar_16.xyz * xlv_TEXCOORD2);
  tmpvar_12 = tmpvar_16.w;
  tmpvar_6 = tmpvar_11;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (unity_WorldToLight * tmpvar_17).xyz;
  mediump float shadowMaskAttenuation_19;
  highp vec4 v_20;
  v_20.x = unity_MatrixV[0].z;
  v_20.y = unity_MatrixV[1].z;
  v_20.z = unity_MatrixV[2].z;
  v_20.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_20.xyz), sqrt(dot (tmpvar_21, tmpvar_21)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_19 = tmpvar_24;
  highp vec3 vec_25;
  vec_25 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_26;
  highp float mydist_27;
  mydist_27 = ((sqrt(
    dot (vec_25, vec_25)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_25 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_26.x = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_31;
  tmpvar_31.w = 0.0;
  tmpvar_31.xyz = (vec_25 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_31.xyz, 0.0);
  tmpvar_32 = tmpvar_33;
  shadowVals_26.y = dot (tmpvar_32, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = (vec_25 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_34.xyz, 0.0);
  tmpvar_35 = tmpvar_36;
  shadowVals_26.z = dot (tmpvar_35, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = (vec_25 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_37.xyz, 0.0);
  tmpvar_38 = tmpvar_39;
  shadowVals_26.w = dot (tmpvar_38, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_26, vec4(mydist_27));
  mediump vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  mediump float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  mediump float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  mediump float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  mediump float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  mediump vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = min (clamp ((
    dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25))
   + tmpvar_22), 0.0, 1.0), shadowMaskAttenuation_19);
  shadow_5 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_18, tmpvar_18))).w * textureCube (_LightTexture0, tmpvar_18).w) * shadow_5);
  atten_4 = tmpvar_48;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_9;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_49;
  lowp float diff_50;
  mediump float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_50 = tmpvar_51;
  c_49.xyz = ((tmpvar_11 * tmpvar_1) * diff_50);
  c_49.w = tmpvar_12;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = (c_49.xyz * vec3(tmpvar_52));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
  GpuProgramID 161129
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5.x = 1.0;
  tmpvar_6.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_7 = tmpvar_2;
  tmpvar_8 = tmpvar_4;
  highp vec2 uv_9;
  uv_9 = tmpvar_6.zy;
  highp float tmpvar_10;
  tmpvar_10 = abs(tmpvar_5.z);
  if ((tmpvar_10 > 0.5)) {
    uv_9 = tmpvar_6.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_9);
  tmpvar_7 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_8 = tmpvar_11.w;
  tmpvar_2 = tmpvar_7;
  tmpvar_4 = tmpvar_8;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5.x = 1.0;
  tmpvar_6.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_7 = tmpvar_2;
  tmpvar_8 = tmpvar_4;
  highp vec2 uv_9;
  uv_9 = tmpvar_6.zy;
  highp float tmpvar_10;
  tmpvar_10 = abs(tmpvar_5.z);
  if ((tmpvar_10 > 0.5)) {
    uv_9 = tmpvar_6.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_9);
  tmpvar_7 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_8 = tmpvar_11.w;
  tmpvar_2 = tmpvar_7;
  tmpvar_4 = tmpvar_8;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5.x = 1.0;
  tmpvar_6.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_7 = tmpvar_2;
  tmpvar_8 = tmpvar_4;
  highp vec2 uv_9;
  uv_9 = tmpvar_6.zy;
  highp float tmpvar_10;
  tmpvar_10 = abs(tmpvar_5.z);
  if ((tmpvar_10 > 0.5)) {
    uv_9 = tmpvar_6.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_9);
  tmpvar_7 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_8 = tmpvar_11.w;
  tmpvar_2 = tmpvar_7;
  tmpvar_4 = tmpvar_8;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 257558
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_6 * light_3.xyz);
  c_13.w = tmpvar_7;
  c_2 = c_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_14));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_16;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_8 * light_5.xyz);
  c_17.w = tmpvar_9;
  c_2 = c_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_18));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = _glesColor.xyz;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_5.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_8;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 res_14;
  mediump vec3 x_15;
  x_15.x = dot (unity_SHAr, normal_13);
  x_15.y = dot (unity_SHAg, normal_13);
  x_15.z = dot (unity_SHAb, normal_13);
  mediump vec3 x1_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
  x1_16.x = dot (unity_SHBr, tmpvar_17);
  x1_16.y = dot (unity_SHBg, tmpvar_17);
  x1_16.z = dot (unity_SHBb, tmpvar_17);
  res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )));
  mediump vec3 tmpvar_18;
  tmpvar_18 = max (((1.055 * 
    pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_14 = tmpvar_18;
  tmpvar_2 = tmpvar_18;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
  xlv_TEXCOORD6 = ((tmpvar_5.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = tmpvar_4;
  tmpvar_7 = tmpvar_5;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD1.zx;
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_9 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_10;
  tmpvar_10 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_10 > 0.5)) {
    uv_8 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, uv_8);
  tmpvar_6 = (tmpvar_11.xyz * xlv_TEXCOORD2);
  tmpvar_7 = tmpvar_11.w;
  tmpvar_4 = tmpvar_6;
  tmpvar_5 = tmpvar_7;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_6 * light_3.xyz);
  c_14.w = tmpvar_7;
  c_2 = c_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_15));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_6.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_12.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_13)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_8));
  xlv_TEXCOORD1 = tmpvar_12.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = ((tmpvar_6.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_8 = tmpvar_6;
  tmpvar_9 = tmpvar_7;
  highp vec2 uv_10;
  uv_10 = xlv_TEXCOORD1.zx;
  highp float tmpvar_11;
  tmpvar_11 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_11 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_12;
  tmpvar_12 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_12 > 0.5)) {
    uv_10 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, uv_10);
  tmpvar_8 = (tmpvar_13.xyz * xlv_TEXCOORD2);
  tmpvar_9 = tmpvar_13.w;
  tmpvar_6 = tmpvar_8;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_5 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_15.w;
  mediump vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_Lightmap, xlv_TEXCOORD4.xy);
  lmtex_4 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_17;
  light_5.xyz = (tmpvar_15.xyz + lm_3);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_8 * light_5.xyz);
  c_18.w = tmpvar_9;
  c_2 = c_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD6, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_19));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 280556
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = emission_11.xyz;
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = emission_11.xyz;
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = emission_11.xyz;
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 emission_11;
  mediump vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_5;
  tmpvar_13 = tmpvar_3;
  mediump vec4 outGBuffer2_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = 1.0;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_16.w = 0.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_13 * 0.5) + 0.5);
  outGBuffer2_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_11 = tmpvar_18;
  emission_11.xyz = (emission_11.xyz + (tmpvar_5 * xlv_TEXCOORD4));
  outEmission_1.w = emission_11.w;
  outEmission_1.xyz = exp2(-(emission_11.xyz));
  gl_FragData[0] = tmpvar_15;
  gl_FragData[1] = tmpvar_16;
  gl_FragData[2] = outGBuffer2_14;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_12;
  color_12 = tmpvar_11;
  mediump vec4 emission_13;
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5;
  tmpvar_15 = tmpvar_3;
  mediump vec4 outGBuffer2_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = 1.0;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_18.w = 0.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
  outGBuffer2_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_20;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (unity_Lightmap_HDR.x * color_12.xyz)));
  outEmission_1.w = emission_13.w;
  outEmission_1.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = tmpvar_17;
  gl_FragData[1] = tmpvar_18;
  gl_FragData[2] = outGBuffer2_16;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_2 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec3 ambient_12;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_11;
  mediump vec3 x_14;
  x_14.x = dot (unity_SHAr, tmpvar_13);
  x_14.y = dot (unity_SHAg, tmpvar_13);
  x_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec3 x1_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normalWorld_11.xyzz * normalWorld_11.yzzx);
  x1_15.x = dot (unity_SHBr, tmpvar_16);
  x1_15.y = dot (unity_SHBg, tmpvar_16);
  x1_15.z = dot (unity_SHBb, tmpvar_16);
  ambient_12 = max (vec3(0.0, 0.0, 0.0), (x_14 + (x1_15 + 
    (unity_SHC.xyz * ((normalWorld_11.x * normalWorld_11.x) - (normalWorld_11.y * normalWorld_11.y)))
  )));
  mediump vec3 tmpvar_17;
  tmpvar_17 = max (((1.055 * 
    pow (max (ambient_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_12 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_5;
  tmpvar_22 = tmpvar_3;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (tmpvar_17 + 
    (unity_Lightmap_HDR.x * color_19.xyz)
  )));
  outEmission_1.w = emission_20.w;
  outEmission_1.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = emission_10.xyz;
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = emission_10.xyz;
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = emission_10.xyz;
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = _glesColor.xyz;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 emission_10;
  mediump vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_4;
  tmpvar_12 = tmpvar_2;
  mediump vec4 outGBuffer2_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_11;
  tmpvar_14.w = 1.0;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_15.w = 0.0;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
  outGBuffer2_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_10 = tmpvar_17;
  emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_14;
  gl_FragData[1] = tmpvar_15;
  gl_FragData[2] = outGBuffer2_13;
  gl_FragData[3] = emission_10;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_11;
  color_11 = tmpvar_10;
  mediump vec4 emission_12;
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_4;
  tmpvar_14 = tmpvar_2;
  mediump vec4 outGBuffer2_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = 1.0;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_17.w = 0.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
  outGBuffer2_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_19;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_11.xyz)));
  gl_FragData[0] = tmpvar_16;
  gl_FragData[1] = tmpvar_17;
  gl_FragData[2] = outGBuffer2_15;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = _glesColor.xyz;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_8.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_9)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp float tmpvar_3;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = 0.0;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = tmpvar_1;
  tmpvar_5 = tmpvar_3;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD1.zx;
  highp float tmpvar_7;
  tmpvar_7 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_7 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_8 > 0.5)) {
    uv_6 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, uv_6);
  tmpvar_4 = (tmpvar_9.xyz * xlv_TEXCOORD2);
  tmpvar_5 = tmpvar_9.w;
  tmpvar_1 = tmpvar_4;
  tmpvar_3 = tmpvar_5;
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec3 ambient_11;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_10;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, tmpvar_12);
  x_13.y = dot (unity_SHAg, tmpvar_12);
  x_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normalWorld_10.xyzz * normalWorld_10.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  ambient_11 = max (vec3(0.0, 0.0, 0.0), (x_13 + (x1_14 + 
    (unity_SHC.xyz * ((normalWorld_10.x * normalWorld_10.x) - (normalWorld_10.y * normalWorld_10.y)))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (ambient_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_11 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_2;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (tmpvar_16 + 
    (unity_Lightmap_HDR.x * color_18.xyz)
  )));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = emission_19;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "META"
  LOD 200
  Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 351215
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = vertex_3.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_3;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_3 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  tmpvar_2 = tmpvar_5;
  mediump vec4 res_11;
  res_11 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = tmpvar_2;
    res_11.w = tmpvar_12.w;
    highp vec3 tmpvar_13;
    tmpvar_13 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_11.xyz = tmpvar_13;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_14;
    if (bool(unity_UseLinearSpace)) {
      emission_14 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_14 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = emission_14;
    res_11 = tmpvar_15;
  };
  tmpvar_1 = res_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = vertex_3.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_3;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_3 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  tmpvar_2 = tmpvar_5;
  mediump vec4 res_11;
  res_11 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = tmpvar_2;
    res_11.w = tmpvar_12.w;
    highp vec3 tmpvar_13;
    tmpvar_13 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_11.xyz = tmpvar_13;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_14;
    if (bool(unity_UseLinearSpace)) {
      emission_14 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_14 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = emission_14;
    res_11 = tmpvar_15;
  };
  tmpvar_1 = res_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = _glesColor.xyz;
  tmpvar_1 = tmpvar_2;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = vertex_3.xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = 0.0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = tmpvar_3;
  tmpvar_6 = tmpvar_4;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD1.zx;
  highp float tmpvar_8;
  tmpvar_8 = abs(xlv_TEXCOORD0.x);
  if ((tmpvar_8 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.zy;
  };
  highp float tmpvar_9;
  tmpvar_9 = abs(xlv_TEXCOORD0.z);
  if ((tmpvar_9 > 0.5)) {
    uv_7 = xlv_TEXCOORD1.xy;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, uv_7);
  tmpvar_5 = (tmpvar_10.xyz * xlv_TEXCOORD2);
  tmpvar_6 = tmpvar_10.w;
  tmpvar_3 = tmpvar_5;
  tmpvar_4 = tmpvar_6;
  tmpvar_2 = tmpvar_5;
  mediump vec4 res_11;
  res_11 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = tmpvar_2;
    res_11.w = tmpvar_12.w;
    highp vec3 tmpvar_13;
    tmpvar_13 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_11.xyz = tmpvar_13;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_14;
    if (bool(unity_UseLinearSpace)) {
      emission_14 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_14 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = emission_14;
    res_11 = tmpvar_15;
  };
  tmpvar_1 = res_11;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
}
Fallback "Diffuse"
}