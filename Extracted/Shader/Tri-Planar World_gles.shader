//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Tri-Planar World" {
Properties {
_Side ("Side", 2D) = "white" { }
_Top ("Top", 2D) = "white" { }
_Bottom ("Bottom", 2D) = "white" { }
_SideScale ("Side Scale", Float) = 2
_TopScale ("Top Scale", Float) = 2
_BottomScale ("Bottom Scale", Float) = 2
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Geometry" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 57366
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = normalize((_glesNormal * tmpvar_2));
  mediump vec3 normal_4;
  normal_4 = tmpvar_3;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = normal_4;
  mediump vec3 res_6;
  mediump vec3 x_7;
  x_7.x = dot (unity_SHAr, tmpvar_5);
  x_7.y = dot (unity_SHAg, tmpvar_5);
  x_7.z = dot (unity_SHAb, tmpvar_5);
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_4.xyzz * normal_4.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  res_6 = (x_7 + (x1_8 + (unity_SHC.xyz * 
    ((normal_4.x * normal_4.x) - (normal_4.y * normal_4.y))
  )));
  mediump vec3 tmpvar_10;
  tmpvar_10 = max (((1.055 * 
    pow (max (res_6, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_6 = tmpvar_10;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_10);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  c_3.xyz = c_33.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  c_1.xyz = c_21.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  c_1.xyz = c_29.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  c_1.xyz = c_29.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  c_1.xyz = c_29.xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_4;
  tmpvar_4 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_4 + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_4 + unity_LightmapST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec3 x1_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = (normal_5.xyzz * normal_5.yzzx);
  x1_6.x = dot (unity_SHBr, tmpvar_7);
  x1_6.y = dot (unity_SHBg, tmpvar_7);
  x1_6.z = dot (unity_SHBb, tmpvar_7);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_6 + (unity_SHC.xyz * (
    (normal_5.x * normal_5.x)
   - 
    (normal_5.y * normal_5.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  c_4.xyz = c_36.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_43.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_43.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_43.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_34.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_34.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_34.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_40.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_40.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  c_2.xyz = c_40.xyz;
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  highp vec4 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_4.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_4);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  c_4.xyz = c_45.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  highp vec3 lightColor0_6;
  lightColor0_6 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_7;
  lightColor1_7 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_8;
  lightColor2_8 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_9;
  lightColor3_9 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_10;
  lightAttenSq_10 = unity_4LightAtten0;
  highp vec3 col_11;
  highp vec4 ndotl_12;
  highp vec4 lengthSq_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_4LightPosX0 - tmpvar_3.x);
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosY0 - tmpvar_3.y);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosZ0 - tmpvar_3.z);
  lengthSq_13 = (tmpvar_14 * tmpvar_14);
  lengthSq_13 = (lengthSq_13 + (tmpvar_15 * tmpvar_15));
  lengthSq_13 = (lengthSq_13 + (tmpvar_16 * tmpvar_16));
  highp vec4 tmpvar_17;
  tmpvar_17 = max (lengthSq_13, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_13 = tmpvar_17;
  ndotl_12 = (tmpvar_14 * tmpvar_5.x);
  ndotl_12 = (ndotl_12 + (tmpvar_15 * tmpvar_5.y));
  ndotl_12 = (ndotl_12 + (tmpvar_16 * tmpvar_5.z));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_12 * inversesqrt(tmpvar_17)));
  ndotl_12 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (1.0/((1.0 + 
    (tmpvar_17 * lightAttenSq_10)
  ))));
  col_11 = (lightColor0_6 * tmpvar_19.x);
  col_11 = (col_11 + (lightColor1_7 * tmpvar_19.y));
  col_11 = (col_11 + (lightColor2_8 * tmpvar_19.z));
  col_11 = (col_11 + (lightColor3_9 * tmpvar_19.w));
  tmpvar_1 = col_11;
  mediump vec3 normal_20;
  normal_20 = tmpvar_5;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normal_20;
  mediump vec3 res_23;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_22);
  x_24.y = dot (unity_SHAg, tmpvar_22);
  x_24.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_20.xyzz * normal_20.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (res_23, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_23 = tmpvar_27;
  ambient_21 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_27));
  tmpvar_1 = ambient_21;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ambient_21;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  highp vec3 lightColor0_6;
  lightColor0_6 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_7;
  lightColor1_7 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_8;
  lightColor2_8 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_9;
  lightColor3_9 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_10;
  lightAttenSq_10 = unity_4LightAtten0;
  highp vec3 col_11;
  highp vec4 ndotl_12;
  highp vec4 lengthSq_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_4LightPosX0 - tmpvar_3.x);
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosY0 - tmpvar_3.y);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosZ0 - tmpvar_3.z);
  lengthSq_13 = (tmpvar_14 * tmpvar_14);
  lengthSq_13 = (lengthSq_13 + (tmpvar_15 * tmpvar_15));
  lengthSq_13 = (lengthSq_13 + (tmpvar_16 * tmpvar_16));
  highp vec4 tmpvar_17;
  tmpvar_17 = max (lengthSq_13, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_13 = tmpvar_17;
  ndotl_12 = (tmpvar_14 * tmpvar_5.x);
  ndotl_12 = (ndotl_12 + (tmpvar_15 * tmpvar_5.y));
  ndotl_12 = (ndotl_12 + (tmpvar_16 * tmpvar_5.z));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_12 * inversesqrt(tmpvar_17)));
  ndotl_12 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (1.0/((1.0 + 
    (tmpvar_17 * lightAttenSq_10)
  ))));
  col_11 = (lightColor0_6 * tmpvar_19.x);
  col_11 = (col_11 + (lightColor1_7 * tmpvar_19.y));
  col_11 = (col_11 + (lightColor2_8 * tmpvar_19.z));
  col_11 = (col_11 + (lightColor3_9 * tmpvar_19.w));
  tmpvar_1 = col_11;
  mediump vec3 normal_20;
  normal_20 = tmpvar_5;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normal_20;
  mediump vec3 res_23;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_22);
  x_24.y = dot (unity_SHAg, tmpvar_22);
  x_24.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_20.xyzz * normal_20.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (res_23, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_23 = tmpvar_27;
  ambient_21 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_27));
  tmpvar_1 = ambient_21;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ambient_21;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  highp vec3 lightColor0_6;
  lightColor0_6 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_7;
  lightColor1_7 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_8;
  lightColor2_8 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_9;
  lightColor3_9 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_10;
  lightAttenSq_10 = unity_4LightAtten0;
  highp vec3 col_11;
  highp vec4 ndotl_12;
  highp vec4 lengthSq_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_4LightPosX0 - tmpvar_3.x);
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosY0 - tmpvar_3.y);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosZ0 - tmpvar_3.z);
  lengthSq_13 = (tmpvar_14 * tmpvar_14);
  lengthSq_13 = (lengthSq_13 + (tmpvar_15 * tmpvar_15));
  lengthSq_13 = (lengthSq_13 + (tmpvar_16 * tmpvar_16));
  highp vec4 tmpvar_17;
  tmpvar_17 = max (lengthSq_13, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_13 = tmpvar_17;
  ndotl_12 = (tmpvar_14 * tmpvar_5.x);
  ndotl_12 = (ndotl_12 + (tmpvar_15 * tmpvar_5.y));
  ndotl_12 = (ndotl_12 + (tmpvar_16 * tmpvar_5.z));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_12 * inversesqrt(tmpvar_17)));
  ndotl_12 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (1.0/((1.0 + 
    (tmpvar_17 * lightAttenSq_10)
  ))));
  col_11 = (lightColor0_6 * tmpvar_19.x);
  col_11 = (col_11 + (lightColor1_7 * tmpvar_19.y));
  col_11 = (col_11 + (lightColor2_8 * tmpvar_19.z));
  col_11 = (col_11 + (lightColor3_9 * tmpvar_19.w));
  tmpvar_1 = col_11;
  mediump vec3 normal_20;
  normal_20 = tmpvar_5;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normal_20;
  mediump vec3 res_23;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_22);
  x_24.y = dot (unity_SHAg, tmpvar_22);
  x_24.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_20.xyzz * normal_20.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )));
  mediump vec3 tmpvar_27;
  tmpvar_27 = max (((1.055 * 
    pow (max (res_23, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_23 = tmpvar_27;
  ambient_21 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_27));
  tmpvar_1 = ambient_21;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ambient_21;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_37) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = c_39.xyz;
  c_4.xyz = c_38.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  c_4.xyz = c_42.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp vec4 c_41;
  lowp float diff_42;
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_42 = tmpvar_43;
  c_41.xyz = ((tmpvar_10 * tmpvar_39) * diff_42);
  c_41.w = 0.0;
  c_40.w = c_41.w;
  c_40.xyz = c_41.xyz;
  c_4.xyz = c_40.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_22 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_23 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_1 = ambient_22;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  c_4.xyz = c_44.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_27) * diff_30);
  c_29.w = 0.0;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_10 * xlv_TEXCOORD2));
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_28.xyz, vec3(tmpvar_32));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_25;
  color_25 = tmpvar_24;
  tmpvar_23 = (unity_Lightmap_HDR.x * color_25.xyz);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_26.xyz, vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_5;
  mediump vec3 tmpvar_24;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_26);
  x_27.y = dot (unity_SHAg, tmpvar_26);
  x_27.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  ambient_25 = max (vec3(0.0, 0.0, 0.0), (x_27 + (x1_28 + 
    (unity_SHC.xyz * ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y)))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (ambient_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_25 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_32;
  color_32 = tmpvar_31;
  tmpvar_24 = (tmpvar_30 + (unity_Lightmap_HDR.x * color_32.xyz));
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_35 = tmpvar_36;
  c_34.xyz = ((tmpvar_8 * tmpvar_1) * diff_35);
  c_34.w = 0.0;
  c_33.w = c_34.w;
  c_33.xyz = (c_34.xyz + (tmpvar_8 * tmpvar_24));
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_37));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_22));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_22));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_2 = tmpvar_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  tmpvar_18 = (unity_Lightmap_HDR.x * color_20.xyz);
  lowp vec4 c_21;
  c_21.w = 0.0;
  c_21.xyz = (tmpvar_3 * tmpvar_18);
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_21.xyz, vec3(tmpvar_22));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_30));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_30));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 tmpvar_20;
  mediump vec3 ambient_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_21 = max (vec3(0.0, 0.0, 0.0), (x_23 + (x1_24 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (ambient_21, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_21 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_28;
  color_28 = tmpvar_27;
  tmpvar_20 = (tmpvar_26 + (unity_Lightmap_HDR.x * color_28.xyz));
  lowp vec4 c_29;
  c_29.w = 0.0;
  c_29.xyz = (tmpvar_4 * tmpvar_20);
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_30));
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_29;
  tmpvar_29 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_30;
  color_30 = tmpvar_29;
  tmpvar_28 = (unity_Lightmap_HDR.x * color_30.xyz);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_27) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_10 * tmpvar_28));
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_31.xyz, vec3(tmpvar_35));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec2 tmpvar_5;
  tmpvar_5 = (_glesMultiTexCoord1.xy * unity_LightmapST.xy);
  tmpvar_1.xy = (tmpvar_5 + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (tmpvar_5 + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float shadowMaskAttenuation_25;
  lowp float tmpvar_26;
  tmpvar_26 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_25 = tmpvar_26;
  atten_5 = shadowMaskAttenuation_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_7;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_27;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_27.xyzz * normalWorld_27.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_27.x * normalWorld_27.x) - (normalWorld_27.y * normalWorld_27.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_29 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_10 * tmpvar_28) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_10 * tmpvar_29));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  mediump vec3 normal_7;
  normal_7 = tmpvar_6;
  mediump vec3 x1_8;
  mediump vec4 tmpvar_9;
  tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
  x1_8.x = dot (unity_SHBr, tmpvar_9);
  x1_8.y = dot (unity_SHBg, tmpvar_9);
  x1_8.z = dot (unity_SHBb, tmpvar_9);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_8 + (unity_SHC.xyz * (
    (normal_7.x * normal_7.x)
   - 
    (normal_7.y * normal_7.y)
  )));
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  mediump vec3 normal_6;
  normal_6 = tmpvar_5;
  mediump vec3 x1_7;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (normal_6.xyzz * normal_6.yzzx);
  x1_7.x = dot (unity_SHBr, tmpvar_8);
  x1_7.y = dot (unity_SHBg, tmpvar_8);
  x1_7.z = dot (unity_SHBb, tmpvar_8);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = (x1_7 + (unity_SHC.xyz * (
    (normal_6.x * normal_6.x)
   - 
    (normal_6.y * normal_6.y)
  )));
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 tmpvar_28;
  mediump vec3 tmpvar_29;
  highp vec4 v_30;
  v_30.x = unity_MatrixV[0].z;
  v_30.y = unity_MatrixV[1].z;
  v_30.z = unity_MatrixV[2].z;
  v_30.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_30.xyz), sqrt(dot (tmpvar_31, tmpvar_31)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  tmpvar_28 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_32), 0.0, 1.0));
  mediump vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_35;
  color_35 = tmpvar_34;
  tmpvar_29 = (unity_Lightmap_HDR.x * color_35.xyz);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_38 = tmpvar_39;
  c_37.xyz = ((tmpvar_9 * tmpvar_28) * diff_38);
  c_37.w = 0.0;
  c_36.w = c_37.w;
  c_36.xyz = (c_37.xyz + (tmpvar_9 * tmpvar_29));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_36.xyz, vec3(tmpvar_40));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_43.xyz, vec3(tmpvar_47));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_43.xyz, vec3(tmpvar_47));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  highp vec4 v_31;
  v_31.x = unity_MatrixV[0].z;
  v_31.y = unity_MatrixV[1].z;
  v_31.z = unity_MatrixV[2].z;
  v_31.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_31.xyz), sqrt(dot (tmpvar_32, tmpvar_32)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  tmpvar_29 = (tmpvar_2 * clamp ((tmpvar_1 + tmpvar_33), 0.0, 1.0));
  mediump vec3 ambient_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_28;
  mediump vec3 x_37;
  x_37.x = dot (unity_SHAr, tmpvar_36);
  x_37.y = dot (unity_SHAg, tmpvar_36);
  x_37.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_38.x = dot (unity_SHBr, tmpvar_39);
  x1_38.y = dot (unity_SHBg, tmpvar_39);
  x1_38.z = dot (unity_SHBb, tmpvar_39);
  ambient_35 = max (vec3(0.0, 0.0, 0.0), (x_37 + (x1_38 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_40;
  tmpvar_40 = max (((1.055 * 
    pow (max (ambient_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_35 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_42;
  color_42 = tmpvar_41;
  tmpvar_30 = (tmpvar_40 + (unity_Lightmap_HDR.x * color_42.xyz));
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_43;
  lowp vec4 c_44;
  lowp float diff_45;
  mediump float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_45 = tmpvar_46;
  c_44.xyz = ((tmpvar_9 * tmpvar_29) * diff_45);
  c_44.w = 0.0;
  c_43.w = c_44.w;
  c_43.xyz = (c_44.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_43.xyz, vec3(tmpvar_47));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_35));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_35));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_31;
  color_31 = tmpvar_30;
  tmpvar_25 = (unity_Lightmap_HDR.x * color_31.xyz);
  mediump vec3 shadowColor_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = unity_ShadowColor.xyz;
  shadowColor_32 = tmpvar_33;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_32), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_34;
  c_34.w = 0.0;
  c_34.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_35;
  tmpvar_35 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_34.xyz, vec3(tmpvar_35));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_41));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_41));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_ShadowColor;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  lowp vec4 c_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_3;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_3 = tmpvar_5;
  lowp float tmpvar_20;
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_21);
  tmpvar_20 = tmpvar_23;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_4;
  mediump vec3 tmpvar_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec3 ambient_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_24;
  mediump vec3 x_32;
  x_32.x = dot (unity_SHAr, tmpvar_31);
  x_32.y = dot (unity_SHAg, tmpvar_31);
  x_32.z = dot (unity_SHAb, tmpvar_31);
  mediump vec3 x1_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normalWorld_24.xyzz * normalWorld_24.yzzx);
  x1_33.x = dot (unity_SHBr, tmpvar_34);
  x1_33.y = dot (unity_SHBg, tmpvar_34);
  x1_33.z = dot (unity_SHBb, tmpvar_34);
  ambient_30 = max (vec3(0.0, 0.0, 0.0), (x_32 + (x1_33 + 
    (unity_SHC.xyz * ((normalWorld_24.x * normalWorld_24.x) - (normalWorld_24.y * normalWorld_24.y)))
  )));
  mediump vec3 tmpvar_35;
  tmpvar_35 = max (((1.055 * 
    pow (max (ambient_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_30 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_25 = (tmpvar_35 + (unity_Lightmap_HDR.x * color_37.xyz));
  mediump vec3 shadowColor_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = unity_ShadowColor.xyz;
  shadowColor_38 = tmpvar_39;
  tmpvar_25 = min (tmpvar_25, mix (max (
    (tmpvar_25 - ((max (0.0, 
      dot (normalWorld_24, _WorldSpaceLightPos0.xyz)
    ) * (1.0 - 
      clamp ((tmpvar_1 + tmpvar_28), 0.0, 1.0)
    )) * _LightColor0.xyz))
  , shadowColor_38), tmpvar_25, _LightShadowData.xxx));
  lowp vec4 c_40;
  c_40.w = 0.0;
  c_40.xyz = (tmpvar_5 * tmpvar_25);
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_41));
  c_2.w = 1.0;
  gl_FragData[0] = c_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_28, tmpvar_34));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * mix (tmpvar_1, bakedAtten_29, tmpvar_35));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump float bakedAtten_28;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_28 = tmpvar_31;
  highp vec4 v_32;
  v_32.x = unity_MatrixV[0].z;
  v_32.y = unity_MatrixV[1].z;
  v_32.z = unity_MatrixV[2].z;
  v_32.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_32.xyz), sqrt(dot (tmpvar_33, tmpvar_33)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  tmpvar_29 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_34)
  , 0.0, 1.0), bakedAtten_28));
  mediump vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_37;
  color_37 = tmpvar_36;
  tmpvar_30 = (unity_Lightmap_HDR.x * color_37.xyz);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_38;
  lowp vec4 c_39;
  lowp float diff_40;
  mediump float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_40 = tmpvar_41;
  c_39.xyz = ((tmpvar_9 * tmpvar_29) * diff_40);
  c_39.w = 0.0;
  c_38.w = c_39.w;
  c_38.xyz = (c_39.xyz + (tmpvar_9 * tmpvar_30));
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_42));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  highp vec4 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
  xlv_TEXCOORD1 = tmpvar_5.xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * tmpvar_5);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform sampler2D unity_ShadowMask;
uniform mediump vec4 unity_Lightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  lowp float tmpvar_24;
  highp float lightShadowDataX_25;
  mediump float tmpvar_26;
  tmpvar_26 = _LightShadowData.x;
  lightShadowDataX_25 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_25);
  tmpvar_24 = tmpvar_27;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_6;
  mediump float bakedAtten_29;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  lowp float tmpvar_32;
  tmpvar_32 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD2.xy), unity_OcclusionMaskSelector), 0.0, 1.0);
  bakedAtten_29 = tmpvar_32;
  highp vec4 v_33;
  v_33.x = unity_MatrixV[0].z;
  v_33.y = unity_MatrixV[1].z;
  v_33.z = unity_MatrixV[2].z;
  v_33.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_33.xyz), sqrt(dot (tmpvar_34, tmpvar_34)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  tmpvar_30 = (tmpvar_2 * min (clamp (
    (tmpvar_1 + tmpvar_35)
  , 0.0, 1.0), bakedAtten_29));
  mediump vec3 ambient_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = normalWorld_28;
  mediump vec3 x_39;
  x_39.x = dot (unity_SHAr, tmpvar_38);
  x_39.y = dot (unity_SHAg, tmpvar_38);
  x_39.z = dot (unity_SHAb, tmpvar_38);
  mediump vec3 x1_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normalWorld_28.xyzz * normalWorld_28.yzzx);
  x1_40.x = dot (unity_SHBr, tmpvar_41);
  x1_40.y = dot (unity_SHBg, tmpvar_41);
  x1_40.z = dot (unity_SHBb, tmpvar_41);
  ambient_37 = max (vec3(0.0, 0.0, 0.0), (x_39 + (x1_40 + 
    (unity_SHC.xyz * ((normalWorld_28.x * normalWorld_28.x) - (normalWorld_28.y * normalWorld_28.y)))
  )));
  mediump vec3 tmpvar_42;
  tmpvar_42 = max (((1.055 * 
    pow (max (ambient_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_37 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_44;
  color_44 = tmpvar_43;
  tmpvar_31 = (tmpvar_42 + (unity_Lightmap_HDR.x * color_44.xyz));
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_45;
  lowp vec4 c_46;
  lowp float diff_47;
  mediump float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_47 = tmpvar_48;
  c_46.xyz = ((tmpvar_9 * tmpvar_30) * diff_47);
  c_46.w = 0.0;
  c_45.w = c_46.w;
  c_45.xyz = (c_46.xyz + (tmpvar_9 * tmpvar_31));
  highp float tmpvar_49;
  tmpvar_49 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_45.xyz, vec3(tmpvar_49));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD4 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normal_21;
  mediump vec3 res_24;
  mediump vec3 x_25;
  x_25.x = dot (unity_SHAr, tmpvar_23);
  x_25.y = dot (unity_SHAg, tmpvar_23);
  x_25.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_21.xyzz * normal_21.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  res_24 = (x_25 + (x1_26 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  mediump vec3 tmpvar_28;
  tmpvar_28 = max (((1.055 * 
    pow (max (res_24, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_24 = tmpvar_28;
  ambient_22 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_28));
  tmpvar_1 = ambient_22;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normal_21;
  mediump vec3 res_24;
  mediump vec3 x_25;
  x_25.x = dot (unity_SHAr, tmpvar_23);
  x_25.y = dot (unity_SHAg, tmpvar_23);
  x_25.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_21.xyzz * normal_21.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  res_24 = (x_25 + (x1_26 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  mediump vec3 tmpvar_28;
  tmpvar_28 = max (((1.055 * 
    pow (max (res_24, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_24 = tmpvar_28;
  ambient_22 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_28));
  tmpvar_1 = ambient_22;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp vec3 tmpvar_4;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec3 lightColor0_7;
  lightColor0_7 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_8;
  lightColor1_8 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_9;
  lightColor2_9 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_10;
  lightColor3_10 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_11;
  lightAttenSq_11 = unity_4LightAtten0;
  highp vec3 col_12;
  highp vec4 ndotl_13;
  highp vec4 lengthSq_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_14 = (tmpvar_15 * tmpvar_15);
  lengthSq_14 = (lengthSq_14 + (tmpvar_16 * tmpvar_16));
  lengthSq_14 = (lengthSq_14 + (tmpvar_17 * tmpvar_17));
  highp vec4 tmpvar_18;
  tmpvar_18 = max (lengthSq_14, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_14 = tmpvar_18;
  ndotl_13 = (tmpvar_15 * tmpvar_6.x);
  ndotl_13 = (ndotl_13 + (tmpvar_16 * tmpvar_6.y));
  ndotl_13 = (ndotl_13 + (tmpvar_17 * tmpvar_6.z));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_13 * inversesqrt(tmpvar_18)));
  ndotl_13 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (1.0/((1.0 + 
    (tmpvar_18 * lightAttenSq_11)
  ))));
  col_12 = (lightColor0_7 * tmpvar_20.x);
  col_12 = (col_12 + (lightColor1_8 * tmpvar_20.y));
  col_12 = (col_12 + (lightColor2_9 * tmpvar_20.z));
  col_12 = (col_12 + (lightColor3_10 * tmpvar_20.w));
  tmpvar_1 = col_12;
  mediump vec3 normal_21;
  normal_21 = tmpvar_6;
  mediump vec3 ambient_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normal_21;
  mediump vec3 res_24;
  mediump vec3 x_25;
  x_25.x = dot (unity_SHAr, tmpvar_23);
  x_25.y = dot (unity_SHAg, tmpvar_23);
  x_25.z = dot (unity_SHAb, tmpvar_23);
  mediump vec3 x1_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_21.xyzz * normal_21.yzzx);
  x1_26.x = dot (unity_SHBr, tmpvar_27);
  x1_26.y = dot (unity_SHBg, tmpvar_27);
  x1_26.z = dot (unity_SHBb, tmpvar_27);
  res_24 = (x_25 + (x1_26 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  mediump vec3 tmpvar_28;
  tmpvar_28 = max (((1.055 * 
    pow (max (res_24, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_24 = tmpvar_28;
  ambient_22 = (tmpvar_1 + max (vec3(0.0, 0.0, 0.0), tmpvar_28));
  tmpvar_1 = ambient_22;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ambient_22;
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * xlv_TEXCOORD2));
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_3.xyz = mix (unity_FogColor.xyz, c_23.xyz, vec3(tmpvar_27));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_37;
  lowp vec4 c_38;
  lowp float diff_39;
  mediump float tmpvar_40;
  tmpvar_40 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_39 = tmpvar_40;
  c_38.xyz = ((tmpvar_10 * tmpvar_37) * diff_39);
  c_38.w = 0.0;
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_38.xyz, vec3(tmpvar_41));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambient_24;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambient_24;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * tmpvar_8.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_13)
  ))));
  col_14 = (lightColor0_9 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
  tmpvar_1 = col_14;
  mediump vec3 normal_23;
  normal_23 = tmpvar_8;
  mediump vec3 ambient_24;
  mediump vec3 x1_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x1_25.x = dot (unity_SHBr, tmpvar_26);
  x1_25.y = dot (unity_SHBg, tmpvar_26);
  x1_25.z = dot (unity_SHBb, tmpvar_26);
  ambient_24 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  tmpvar_1 = ambient_24;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambient_24;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  highp vec4 v_26;
  v_26.x = unity_MatrixV[0].z;
  v_26.y = unity_MatrixV[1].z;
  v_26.z = unity_MatrixV[2].z;
  v_26.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_26.xyz), sqrt(dot (tmpvar_27, tmpvar_27)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_31;
  highp vec4 shadowCoord_32;
  shadowCoord_32 = (unity_WorldToShadow[0] * tmpvar_30);
  highp float lightShadowDataX_33;
  mediump float tmpvar_34;
  tmpvar_34 = _LightShadowData.x;
  lightShadowDataX_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = max (float((texture2D (_ShadowMapTexture, shadowCoord_32.xy).x > shadowCoord_32.z)), lightShadowDataX_33);
  tmpvar_31 = tmpvar_35;
  realtimeShadowAttenuation_25 = tmpvar_31;
  mediump float tmpvar_36;
  tmpvar_36 = clamp ((realtimeShadowAttenuation_25 + tmpvar_28), 0.0, 1.0);
  atten_5 = tmpvar_36;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_37;
  normalWorld_37 = tmpvar_7;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = normalWorld_37;
  mediump vec3 x_40;
  x_40.x = dot (unity_SHAr, tmpvar_39);
  x_40.y = dot (unity_SHAg, tmpvar_39);
  x_40.z = dot (unity_SHAb, tmpvar_39);
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_40)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_38;
  lowp vec4 c_42;
  lowp vec4 c_43;
  lowp float diff_44;
  mediump float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_44 = tmpvar_45;
  c_43.xyz = ((tmpvar_10 * tmpvar_38) * diff_44);
  c_43.w = 0.0;
  c_42.w = c_43.w;
  c_42.xyz = (c_43.xyz + (tmpvar_10 * tmpvar_41));
  highp float tmpvar_46;
  tmpvar_46 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_42.xyz, vec3(tmpvar_46));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = mix (realtimeShadowAttenuation_25, shadowMaskAttenuation_26, tmpvar_29);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_4));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_39;
  lowp vec4 c_40;
  lowp float diff_41;
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_41 = tmpvar_42;
  c_40.xyz = ((tmpvar_10 * tmpvar_39) * diff_41);
  c_40.w = 0.0;
  highp float tmpvar_43;
  tmpvar_43 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_40.xyz, vec3(tmpvar_43));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 col_13;
  highp vec4 ndotl_14;
  highp vec4 lengthSq_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_15 = (tmpvar_16 * tmpvar_16);
  lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
  lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
  highp vec4 tmpvar_19;
  tmpvar_19 = max (lengthSq_15, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_15 = tmpvar_19;
  ndotl_14 = (tmpvar_16 * tmpvar_7.x);
  ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
  ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
  ndotl_14 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
    (tmpvar_19 * lightAttenSq_12)
  ))));
  col_13 = (lightColor0_8 * tmpvar_21.x);
  col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
  col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
  col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
  tmpvar_1 = col_13;
  mediump vec3 normal_22;
  normal_22 = tmpvar_7;
  mediump vec3 ambient_23;
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  ambient_23 = ((tmpvar_1 * (
    (tmpvar_1 * ((tmpvar_1 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
    ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
  )));
  tmpvar_1 = ambient_23;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ambient_23;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD5 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform sampler2D unity_ShadowMask;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _WorldSpaceLightPos0.xyz;
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  mediump float realtimeShadowAttenuation_25;
  mediump float shadowMaskAttenuation_26;
  highp vec4 v_27;
  v_27.x = unity_MatrixV[0].z;
  v_27.y = unity_MatrixV[1].z;
  v_27.z = unity_MatrixV[2].z;
  v_27.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD1 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD1), v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  lowp float tmpvar_31;
  tmpvar_31 = clamp (dot (texture2D (unity_ShadowMask, xlv_TEXCOORD3), unity_OcclusionMaskSelector), 0.0, 1.0);
  shadowMaskAttenuation_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_33;
  highp vec4 shadowCoord_34;
  shadowCoord_34 = (unity_WorldToShadow[0] * tmpvar_32);
  highp float lightShadowDataX_35;
  mediump float tmpvar_36;
  tmpvar_36 = _LightShadowData.x;
  lightShadowDataX_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = max (float((texture2D (_ShadowMapTexture, shadowCoord_34.xy).x > shadowCoord_34.z)), lightShadowDataX_35);
  tmpvar_33 = tmpvar_37;
  realtimeShadowAttenuation_25 = tmpvar_33;
  mediump float tmpvar_38;
  tmpvar_38 = min (clamp ((realtimeShadowAttenuation_25 + tmpvar_29), 0.0, 1.0), shadowMaskAttenuation_26);
  atten_5 = tmpvar_38;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_8;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_39;
  normalWorld_39 = tmpvar_7;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalWorld_39;
  mediump vec3 x_42;
  x_42.x = dot (unity_SHAr, tmpvar_41);
  x_42.y = dot (unity_SHAg, tmpvar_41);
  x_42.z = dot (unity_SHAb, tmpvar_41);
  mediump vec3 tmpvar_43;
  tmpvar_43 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD2 + x_42)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_40;
  lowp vec4 c_44;
  lowp vec4 c_45;
  lowp float diff_46;
  mediump float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, tmpvar_3));
  diff_46 = tmpvar_47;
  c_45.xyz = ((tmpvar_10 * tmpvar_40) * diff_46);
  c_45.w = 0.0;
  c_44.w = c_45.w;
  c_44.xyz = (c_45.xyz + (tmpvar_10 * tmpvar_43));
  highp float tmpvar_48;
  tmpvar_48 = clamp (xlv_TEXCOORD4, 0.0, 1.0);
  c_4.xyz = mix (unity_FogColor.xyz, c_44.xyz, vec3(tmpvar_48));
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 109007
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = 0.0;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.w = 0.0;
  c_31.w = c_32.w;
  c_31.xyz = c_32.xyz;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = 0.0;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).w;
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_4;
  highp vec3 y_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Side, tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * abs(xlv_TEXCOORD0.x)).xyz;
  y_9 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Top, tmpvar_14);
    y_9 = (tmpvar_15 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Bottom, tmpvar_16);
    y_9 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_Side, tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_8 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_8, tmpvar_13, tmpvar_10.xxx);
  tmpvar_8 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_8, y_9, tmpvar_10.yyy);
  tmpvar_8 = tmpvar_22;
  tmpvar_4 = tmpvar_8;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = 0.0;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_23.xyz * vec3(tmpvar_26));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = 0.0;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = 0.0;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25);
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((lightCoord_5.xy / lightCoord_5.w) + 0.5));
  tmpvar_26 = tmpvar_27.w;
  lowp float tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(dot (lightCoord_5.xyz, lightCoord_5.xyz)));
  tmpvar_28 = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_26) * tmpvar_28);
  atten_4 = tmpvar_30;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = 0.0;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_31.xyz * vec3(tmpvar_34));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec3 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_8 = tmpvar_9;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_6;
  highp vec3 y_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.x)).xyz;
  y_11 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_16;
    tmpvar_16 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_Top, tmpvar_16);
    y_11 = (tmpvar_17 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_18;
    tmpvar_18 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_Bottom, tmpvar_18);
    y_11 = (tmpvar_19 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_20;
  tmpvar_20 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Side, tmpvar_20);
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_10 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_10, tmpvar_15, tmpvar_12.xxx);
  tmpvar_10 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_10, y_11, tmpvar_12.yyy);
  tmpvar_10 = tmpvar_24;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = xlv_TEXCOORD1;
  lightCoord_5 = (unity_WorldToLight * tmpvar_25).xyz;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_5, lightCoord_5))).w * textureCube (_LightTexture0, lightCoord_5).w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_7, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = 0.0;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_27.xyz * vec3(tmpvar_30));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = 0.0;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = 0.0;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = ((tmpvar_1.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_5;
  highp vec3 y_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_Side, tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * abs(xlv_TEXCOORD0.x)).xyz;
  y_10 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Top, tmpvar_15);
    y_10 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_17;
    tmpvar_17 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_Bottom, tmpvar_17);
    y_10 = (tmpvar_18 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Side, tmpvar_19);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_9 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (tmpvar_9, tmpvar_14, tmpvar_11.xxx);
  tmpvar_9 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_9, y_10, tmpvar_11.yyy);
  tmpvar_9 = tmpvar_23;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD1;
  highp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_24).xy).w;
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.w = 0.0;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD3, 0.0, 1.0);
  c_3.xyz = (c_26.xyz * vec3(tmpvar_29));
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "PREPASS"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  GpuProgramID 144187
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4.x = 1.0;
  tmpvar_5.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_2;
  highp vec3 y_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = clamp (pow ((tmpvar_5 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract((tmpvar_4.zy * _SideScale));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_Side, tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  y_7 = vec3(0.0, 0.0, 0.0);
  if ((tmpvar_5.y > 0.0)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((tmpvar_4.zx * _TopScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Top, tmpvar_12);
    y_7 = (tmpvar_13 * abs(tmpvar_5.y)).xyz;
  } else {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((tmpvar_4.zx * _BottomScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Bottom, tmpvar_14);
    y_7 = (tmpvar_15 * abs(tmpvar_5.y)).xyz;
  };
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((tmpvar_4.xy * _SideScale));
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_Side, tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * abs(tmpvar_5.z)).xyz;
  tmpvar_6 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_6, tmpvar_11, tmpvar_8.xxx);
  tmpvar_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_6, y_7, tmpvar_8.yyy);
  tmpvar_6 = tmpvar_20;
  tmpvar_2 = tmpvar_6;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4.x = 1.0;
  tmpvar_5.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_2;
  highp vec3 y_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = clamp (pow ((tmpvar_5 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract((tmpvar_4.zy * _SideScale));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_Side, tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  y_7 = vec3(0.0, 0.0, 0.0);
  if ((tmpvar_5.y > 0.0)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((tmpvar_4.zx * _TopScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Top, tmpvar_12);
    y_7 = (tmpvar_13 * abs(tmpvar_5.y)).xyz;
  } else {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((tmpvar_4.zx * _BottomScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Bottom, tmpvar_14);
    y_7 = (tmpvar_15 * abs(tmpvar_5.y)).xyz;
  };
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((tmpvar_4.xy * _SideScale));
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_Side, tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * abs(tmpvar_5.z)).xyz;
  tmpvar_6 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_6, tmpvar_11, tmpvar_8.xxx);
  tmpvar_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_6, y_7, tmpvar_8.yyy);
  tmpvar_6 = tmpvar_20;
  tmpvar_2 = tmpvar_6;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = unity_WorldToObject[0].xyz;
  tmpvar_2[1] = unity_WorldToObject[1].xyz;
  tmpvar_2[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_4.x = 1.0;
  tmpvar_5.x = 1.0;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_2;
  highp vec3 y_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = clamp (pow ((tmpvar_5 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract((tmpvar_4.zy * _SideScale));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_Side, tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  y_7 = vec3(0.0, 0.0, 0.0);
  if ((tmpvar_5.y > 0.0)) {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((tmpvar_4.zx * _TopScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Top, tmpvar_12);
    y_7 = (tmpvar_13 * abs(tmpvar_5.y)).xyz;
  } else {
    highp vec2 tmpvar_14;
    tmpvar_14 = fract((tmpvar_4.zx * _BottomScale));
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_Bottom, tmpvar_14);
    y_7 = (tmpvar_15 * abs(tmpvar_5.y)).xyz;
  };
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((tmpvar_4.xy * _SideScale));
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_Side, tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * abs(tmpvar_5.z)).xyz;
  tmpvar_6 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_6, tmpvar_11, tmpvar_8.xxx);
  tmpvar_6 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_6, y_7, tmpvar_8.yyy);
  tmpvar_6 = tmpvar_20;
  tmpvar_2 = tmpvar_6;
  res_1.xyz = ((tmpvar_3 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 Pass {
  Name "PREPASS"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 238555
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2.xyz = c_25.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2.xyz = c_22.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2.xyz = c_26.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_21;
  c_21.xyz = (tmpvar_5 * light_3.xyz);
  c_21.w = 0.0;
  c_2 = c_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_22));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  light_5 = -(log2(max (light_5, vec4(0.001, 0.001, 0.001, 0.001))));
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_24;
  light_5.xyz = (light_5.xyz + lm_3);
  lowp vec4 c_25;
  c_25.xyz = (tmpvar_7 * light_5.xyz);
  c_25.w = 0.0;
  c_2 = c_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_26));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = tmpvar_6;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 res_12;
  mediump vec3 x_13;
  x_13.x = dot (unity_SHAr, normal_11);
  x_13.y = dot (unity_SHAg, normal_11);
  x_13.z = dot (unity_SHAb, normal_11);
  mediump vec3 x1_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_11.xyzz * normal_11.yzzx);
  x1_14.x = dot (unity_SHBr, tmpvar_15);
  x1_14.y = dot (unity_SHBg, tmpvar_15);
  x1_14.z = dot (unity_SHBb, tmpvar_15);
  res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
    ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y))
  )));
  mediump vec3 tmpvar_16;
  tmpvar_16 = max (((1.055 * 
    pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_12 = tmpvar_16;
  tmpvar_2 = tmpvar_16;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
  xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp vec3 y_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_Side, tmpvar_8);
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * abs(xlv_TEXCOORD0.x)).xyz;
  y_6 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Top, tmpvar_11);
    y_6 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Bottom, tmpvar_13);
    y_6 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_15;
  tmpvar_15 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_Side, tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_5 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_5, tmpvar_10, tmpvar_7.xxx);
  tmpvar_5 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (tmpvar_5, y_6, tmpvar_7.yyy);
  tmpvar_5 = tmpvar_19;
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  light_3.xyz = (tmpvar_21.xyz + xlv_TEXCOORD4);
  lowp vec4 c_22;
  c_22.xyz = (tmpvar_5 * light_3.xyz);
  c_22.w = 0.0;
  c_2 = c_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_23));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = tmpvar_1.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_4.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_10.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_11)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_6));
  xlv_TEXCOORD1 = tmpvar_10.xyz;
  xlv_TEXCOORD2 = o_7;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform sampler2D _LightBuffer;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  lowp vec3 lm_3;
  lowp vec4 lmtex_4;
  mediump vec4 light_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 y_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_10;
  tmpvar_10 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_Side, tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_11 * abs(xlv_TEXCOORD0.x)).xyz;
  y_8 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_Top, tmpvar_13);
    y_8 = (tmpvar_14 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_15;
    tmpvar_15 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_Bottom, tmpvar_15);
    y_8 = (tmpvar_16 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_Side, tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_7 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_7, tmpvar_12, tmpvar_9.xxx);
  tmpvar_7 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (tmpvar_7, y_8, tmpvar_9.yyy);
  tmpvar_7 = tmpvar_21;
  tmpvar_6 = tmpvar_7;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_5 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = max (light_5, vec4(0.001, 0.001, 0.001, 0.001));
  light_5.w = tmpvar_23.w;
  mediump vec4 tmpvar_24;
  tmpvar_24 = texture2D (unity_Lightmap, xlv_TEXCOORD3.xy);
  lmtex_4 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (unity_Lightmap_HDR.x * lmtex_4.xyz);
  lm_3 = tmpvar_25;
  light_5.xyz = (tmpvar_23.xyz + lm_3);
  lowp vec4 c_26;
  c_26.xyz = (tmpvar_7 * light_5.xyz);
  c_26.w = 0.0;
  c_2 = c_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
  c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_27));
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "DEFERRED"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "DEFERRED" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  GpuProgramID 297777
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = emission_19.xyz;
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = emission_19.xyz;
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = emission_19.xyz;
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 emission_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_20 = tmpvar_4;
  tmpvar_21 = tmpvar_3;
  mediump vec4 outGBuffer2_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_20;
  tmpvar_23.w = 1.0;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_24.w = 0.0;
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_21 * 0.5) + 0.5);
  outGBuffer2_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_26;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * xlv_TEXCOORD3));
  outEmission_1.w = emission_19.w;
  outEmission_1.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = tmpvar_23;
  gl_FragData[1] = tmpvar_24;
  gl_FragData[2] = outGBuffer2_22;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_20;
  color_20 = tmpvar_19;
  mediump vec4 emission_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_22 = tmpvar_4;
  tmpvar_23 = tmpvar_3;
  mediump vec4 outGBuffer2_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_22;
  tmpvar_25.w = 1.0;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_26.w = 0.0;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
  outGBuffer2_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_28;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (unity_Lightmap_HDR.x * color_20.xyz)));
  outEmission_1.w = emission_21.w;
  outEmission_1.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = tmpvar_25;
  gl_FragData[1] = tmpvar_26;
  gl_FragData[2] = outGBuffer2_24;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_2;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_2 = tmpvar_4;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_3;
  mediump vec3 ambient_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_23.x = dot (unity_SHBr, tmpvar_24);
  x1_23.y = dot (unity_SHBg, tmpvar_24);
  x1_23.z = dot (unity_SHBb, tmpvar_24);
  ambient_20 = max (vec3(0.0, 0.0, 0.0), (x_22 + (x1_23 + 
    (unity_SHC.xyz * ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y)))
  )));
  mediump vec3 tmpvar_25;
  tmpvar_25 = max (((1.055 * 
    pow (max (ambient_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_20 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_27;
  color_27 = tmpvar_26;
  mediump vec4 emission_28;
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_4;
  tmpvar_30 = tmpvar_3;
  mediump vec4 outGBuffer2_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_29;
  tmpvar_32.w = 1.0;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_33.w = 0.0;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((tmpvar_30 * 0.5) + 0.5);
  outGBuffer2_31 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = vec3(0.0, 0.0, 0.0);
  emission_28 = tmpvar_35;
  emission_28.xyz = (emission_28.xyz + (tmpvar_4 * (tmpvar_25 + 
    (unity_Lightmap_HDR.x * color_27.xyz)
  )));
  outEmission_1.w = emission_28.w;
  outEmission_1.xyz = exp2(-(emission_28.xyz));
  gl_FragData[0] = tmpvar_32;
  gl_FragData[1] = tmpvar_33;
  gl_FragData[2] = outGBuffer2_31;
  gl_FragData[3] = outEmission_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = emission_18.xyz;
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = emission_18.xyz;
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_3));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = emission_18.xyz;
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = unity_WorldToObject[0].xyz;
  tmpvar_3[1] = unity_WorldToObject[1].xyz;
  tmpvar_3[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize((_glesNormal * tmpvar_3));
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  mediump vec3 normal_5;
  normal_5 = tmpvar_4;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = normal_5;
  mediump vec3 res_7;
  mediump vec3 x_8;
  x_8.x = dot (unity_SHAr, tmpvar_6);
  x_8.y = dot (unity_SHAg, tmpvar_6);
  x_8.z = dot (unity_SHAb, tmpvar_6);
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
    ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
  )));
  mediump vec3 tmpvar_11;
  tmpvar_11 = max (((1.055 * 
    pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_7 = tmpvar_11;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 emission_18;
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = tmpvar_3;
  tmpvar_20 = tmpvar_2;
  mediump vec4 outGBuffer2_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_19;
  tmpvar_22.w = 1.0;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_23.w = 0.0;
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_20 * 0.5) + 0.5);
  outGBuffer2_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_25;
  emission_18.xyz = (emission_18.xyz + (tmpvar_3 * xlv_TEXCOORD3));
  gl_FragData[0] = tmpvar_22;
  gl_FragData[1] = tmpvar_23;
  gl_FragData[2] = outGBuffer2_21;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_19;
  color_19 = tmpvar_18;
  mediump vec4 emission_20;
  mediump vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_21 = tmpvar_3;
  tmpvar_22 = tmpvar_2;
  mediump vec4 outGBuffer2_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_21;
  tmpvar_24.w = 1.0;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_25.w = 0.0;
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_22 * 0.5) + 0.5);
  outGBuffer2_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_27;
  emission_20.xyz = (emission_20.xyz + (tmpvar_3 * (unity_Lightmap_HDR.x * color_19.xyz)));
  gl_FragData[0] = tmpvar_24;
  gl_FragData[1] = tmpvar_25;
  gl_FragData[2] = outGBuffer2_23;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tmpvar_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3.xyz = ((tmpvar_6.xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_3.w = (-((unity_MatrixV * 
    (unity_ObjectToWorld * tmpvar_7)
  ).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = tmpvar_6.xyz;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  tmpvar_1 = vec3(0.0, 0.0, 0.0);
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 y_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_6;
  tmpvar_6 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_Side, tmpvar_6);
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * abs(xlv_TEXCOORD0.x)).xyz;
  y_4 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_9;
    tmpvar_9 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_Top, tmpvar_9);
    y_4 = (tmpvar_10 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_11;
    tmpvar_11 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_Bottom, tmpvar_11);
    y_4 = (tmpvar_12 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_13;
  tmpvar_13 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_Side, tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_3 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (tmpvar_3, tmpvar_8, tmpvar_5.xxx);
  tmpvar_3 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_3, y_4, tmpvar_5.yyy);
  tmpvar_3 = tmpvar_17;
  tmpvar_1 = tmpvar_3;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_2;
  mediump vec3 ambient_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_20);
  x_21.y = dot (unity_SHAg, tmpvar_20);
  x_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_18.xyzz * normalWorld_18.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_19 = max (vec3(0.0, 0.0, 0.0), (x_21 + (x1_22 + 
    (unity_SHC.xyz * ((normalWorld_18.x * normalWorld_18.x) - (normalWorld_18.y * normalWorld_18.y)))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (ambient_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  ambient_19 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = texture2D (unity_Lightmap, xlv_TEXCOORD2.xy);
  lowp vec4 color_26;
  color_26 = tmpvar_25;
  mediump vec4 emission_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_3;
  tmpvar_29 = tmpvar_2;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_28;
  tmpvar_31.w = 1.0;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = 0.0;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_29 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_34;
  emission_27.xyz = (emission_27.xyz + (tmpvar_3 * (tmpvar_24 + 
    (unity_Lightmap_HDR.x * color_26.xyz)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = emission_27;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "META" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 368382
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_2;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_2 = 0.0001;
    } else {
      tmpvar_2 = 0.0;
    };
    vertex_1.z = tmpvar_2;
  };
  if (unity_MetaVertexControl.y) {
    vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_3;
    if ((vertex_1.z > 0.0)) {
      tmpvar_3 = 0.0001;
    } else {
      tmpvar_3 = 0.0;
    };
    vertex_1.z = tmpvar_3;
  };
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertex_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_3 = tmpvar_4;
  tmpvar_2 = tmpvar_4;
  mediump vec4 res_19;
  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_20;
    tmpvar_20.w = 1.0;
    tmpvar_20.xyz = tmpvar_2;
    res_19.w = tmpvar_20.w;
    highp vec3 tmpvar_21;
    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_19.xyz = tmpvar_21;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_22;
    if (bool(unity_UseLinearSpace)) {
      emission_22 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_22 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = emission_22;
    res_19 = tmpvar_23;
  };
  tmpvar_1 = res_19;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_2;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_2 = 0.0001;
    } else {
      tmpvar_2 = 0.0;
    };
    vertex_1.z = tmpvar_2;
  };
  if (unity_MetaVertexControl.y) {
    vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_3;
    if ((vertex_1.z > 0.0)) {
      tmpvar_3 = 0.0001;
    } else {
      tmpvar_3 = 0.0;
    };
    vertex_1.z = tmpvar_3;
  };
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertex_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_3 = tmpvar_4;
  tmpvar_2 = tmpvar_4;
  mediump vec4 res_19;
  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_20;
    tmpvar_20.w = 1.0;
    tmpvar_20.xyz = tmpvar_2;
    res_19.w = tmpvar_20.w;
    highp vec3 tmpvar_21;
    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_19.xyz = tmpvar_21;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_22;
    if (bool(unity_UseLinearSpace)) {
      emission_22 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_22 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = emission_22;
    res_19 = tmpvar_23;
  };
  tmpvar_1 = res_19;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_2;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_2 = 0.0001;
    } else {
      tmpvar_2 = 0.0;
    };
    vertex_1.z = tmpvar_2;
  };
  if (unity_MetaVertexControl.y) {
    vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_3;
    if ((vertex_1.z > 0.0)) {
      tmpvar_3 = 0.0001;
    } else {
      tmpvar_3 = 0.0;
    };
    vertex_1.z = tmpvar_3;
  };
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertex_1.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _Side;
uniform sampler2D _Top;
uniform sampler2D _Bottom;
uniform highp float _SideScale;
uniform highp float _TopScale;
uniform highp float _BottomScale;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  highp vec3 y_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = clamp (pow ((xlv_TEXCOORD0 * 1.4), vec3(4.0, 4.0, 4.0)), 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7 = fract((xlv_TEXCOORD1.zy * _SideScale));
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_Side, tmpvar_7);
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * abs(xlv_TEXCOORD0.x)).xyz;
  y_5 = vec3(0.0, 0.0, 0.0);
  if ((xlv_TEXCOORD0.y > 0.0)) {
    highp vec2 tmpvar_10;
    tmpvar_10 = fract((xlv_TEXCOORD1.zx * _TopScale));
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_Top, tmpvar_10);
    y_5 = (tmpvar_11 * abs(xlv_TEXCOORD0.y)).xyz;
  } else {
    highp vec2 tmpvar_12;
    tmpvar_12 = fract((xlv_TEXCOORD1.zx * _BottomScale));
    lowp vec4 tmpvar_13;
    tmpvar_13 = texture2D (_Bottom, tmpvar_12);
    y_5 = (tmpvar_13 * abs(xlv_TEXCOORD0.y)).xyz;
  };
  highp vec2 tmpvar_14;
  tmpvar_14 = fract((xlv_TEXCOORD1.xy * _SideScale));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_Side, tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * abs(xlv_TEXCOORD0.z)).xyz;
  tmpvar_4 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_4, tmpvar_9, tmpvar_6.xxx);
  tmpvar_4 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (tmpvar_4, y_5, tmpvar_6.yyy);
  tmpvar_4 = tmpvar_18;
  tmpvar_3 = tmpvar_4;
  tmpvar_2 = tmpvar_4;
  mediump vec4 res_19;
  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_20;
    tmpvar_20.w = 1.0;
    tmpvar_20.xyz = tmpvar_2;
    res_19.w = tmpvar_20.w;
    highp vec3 tmpvar_21;
    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_19.xyz = tmpvar_21;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_22;
    if (bool(unity_UseLinearSpace)) {
      emission_22 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_22 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = emission_22;
    res_19 = tmpvar_23;
  };
  tmpvar_1 = res_19;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
}
Fallback "Diffuse"
}